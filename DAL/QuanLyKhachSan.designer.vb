'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="QuanLyKhachSan")>  _
Partial Public Class QuanLyKhachSanDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertBAOCAO(instance As BAOCAO)
    End Sub
  Partial Private Sub UpdateBAOCAO(instance As BAOCAO)
    End Sub
  Partial Private Sub DeleteBAOCAO(instance As BAOCAO)
    End Sub
  Partial Private Sub InsertCHITIETBAOCAODOANHTHU(instance As CHITIETBAOCAODOANHTHU)
    End Sub
  Partial Private Sub UpdateCHITIETBAOCAODOANHTHU(instance As CHITIETBAOCAODOANHTHU)
    End Sub
  Partial Private Sub DeleteCHITIETBAOCAODOANHTHU(instance As CHITIETBAOCAODOANHTHU)
    End Sub
  Partial Private Sub InsertCHITIETBAOCAOMATDO(instance As CHITIETBAOCAOMATDO)
    End Sub
  Partial Private Sub UpdateCHITIETBAOCAOMATDO(instance As CHITIETBAOCAOMATDO)
    End Sub
  Partial Private Sub DeleteCHITIETBAOCAOMATDO(instance As CHITIETBAOCAOMATDO)
    End Sub
  Partial Private Sub InsertCHITIETHOADON(instance As CHITIETHOADON)
    End Sub
  Partial Private Sub UpdateCHITIETHOADON(instance As CHITIETHOADON)
    End Sub
  Partial Private Sub DeleteCHITIETHOADON(instance As CHITIETHOADON)
    End Sub
  Partial Private Sub InsertCHITIETPHIEUTHUE(instance As CHITIETPHIEUTHUE)
    End Sub
  Partial Private Sub UpdateCHITIETPHIEUTHUE(instance As CHITIETPHIEUTHUE)
    End Sub
  Partial Private Sub DeleteCHITIETPHIEUTHUE(instance As CHITIETPHIEUTHUE)
    End Sub
  Partial Private Sub InsertHOADON(instance As HOADON)
    End Sub
  Partial Private Sub UpdateHOADON(instance As HOADON)
    End Sub
  Partial Private Sub DeleteHOADON(instance As HOADON)
    End Sub
  Partial Private Sub InsertKHACHHANG(instance As KHACHHANG)
    End Sub
  Partial Private Sub UpdateKHACHHANG(instance As KHACHHANG)
    End Sub
  Partial Private Sub DeleteKHACHHANG(instance As KHACHHANG)
    End Sub
  Partial Private Sub InsertLOAIKHACHHANG(instance As LOAIKHACHHANG)
    End Sub
  Partial Private Sub UpdateLOAIKHACHHANG(instance As LOAIKHACHHANG)
    End Sub
  Partial Private Sub DeleteLOAIKHACHHANG(instance As LOAIKHACHHANG)
    End Sub
  Partial Private Sub InsertLOAIPHONG(instance As LOAIPHONG)
    End Sub
  Partial Private Sub UpdateLOAIPHONG(instance As LOAIPHONG)
    End Sub
  Partial Private Sub DeleteLOAIPHONG(instance As LOAIPHONG)
    End Sub
  Partial Private Sub InsertPHONG(instance As PHONG)
    End Sub
  Partial Private Sub UpdatePHONG(instance As PHONG)
    End Sub
  Partial Private Sub DeletePHONG(instance As PHONG)
    End Sub
  Partial Private Sub InsertLOGIN(instance As LOGIN)
    End Sub
  Partial Private Sub UpdateLOGIN(instance As LOGIN)
    End Sub
  Partial Private Sub DeleteLOGIN(instance As LOGIN)
    End Sub
  Partial Private Sub InsertPHIEUTHUE(instance As PHIEUTHUE)
    End Sub
  Partial Private Sub UpdatePHIEUTHUE(instance As PHIEUTHUE)
    End Sub
  Partial Private Sub DeletePHIEUTHUE(instance As PHIEUTHUE)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.DAL.My.MySettings.Default.QuanLyKhachSanConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property BAOCAOs() As System.Data.Linq.Table(Of BAOCAO)
		Get
			Return Me.GetTable(Of BAOCAO)
		End Get
	End Property
	
	Public ReadOnly Property CHITIETBAOCAODOANHTHUs() As System.Data.Linq.Table(Of CHITIETBAOCAODOANHTHU)
		Get
			Return Me.GetTable(Of CHITIETBAOCAODOANHTHU)
		End Get
	End Property
	
	Public ReadOnly Property CHITIETBAOCAOMATDOs() As System.Data.Linq.Table(Of CHITIETBAOCAOMATDO)
		Get
			Return Me.GetTable(Of CHITIETBAOCAOMATDO)
		End Get
	End Property
	
	Public ReadOnly Property CHITIETHOADONs() As System.Data.Linq.Table(Of CHITIETHOADON)
		Get
			Return Me.GetTable(Of CHITIETHOADON)
		End Get
	End Property
	
	Public ReadOnly Property CHITIETPHIEUTHUEs() As System.Data.Linq.Table(Of CHITIETPHIEUTHUE)
		Get
			Return Me.GetTable(Of CHITIETPHIEUTHUE)
		End Get
	End Property
	
	Public ReadOnly Property HOADONs() As System.Data.Linq.Table(Of HOADON)
		Get
			Return Me.GetTable(Of HOADON)
		End Get
	End Property
	
	Public ReadOnly Property KHACHHANGs() As System.Data.Linq.Table(Of KHACHHANG)
		Get
			Return Me.GetTable(Of KHACHHANG)
		End Get
	End Property
	
	Public ReadOnly Property LOAIKHACHHANGs() As System.Data.Linq.Table(Of LOAIKHACHHANG)
		Get
			Return Me.GetTable(Of LOAIKHACHHANG)
		End Get
	End Property
	
	Public ReadOnly Property LOAIPHONGs() As System.Data.Linq.Table(Of LOAIPHONG)
		Get
			Return Me.GetTable(Of LOAIPHONG)
		End Get
	End Property
	
	Public ReadOnly Property PHONGs() As System.Data.Linq.Table(Of PHONG)
		Get
			Return Me.GetTable(Of PHONG)
		End Get
	End Property
	
	Public ReadOnly Property LOGINs() As System.Data.Linq.Table(Of LOGIN)
		Get
			Return Me.GetTable(Of LOGIN)
		End Get
	End Property
	
	Public ReadOnly Property PHIEUTHUEs() As System.Data.Linq.Table(Of PHIEUTHUE)
		Get
			Return Me.GetTable(Of PHIEUTHUE)
		End Get
	End Property
	
	Public ReadOnly Property THAMSOs() As System.Data.Linq.Table(Of THAMSO)
		Get
			Return Me.GetTable(Of THAMSO)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.BAOCAO")>  _
Partial Public Class BAOCAO
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _MaBaoCao As String
	
	Private _TenLoaiBaoCao As String
	
	Private _ThangBaoCao As Integer
	
	Private _CHITIETBAOCAODOANHTHUs As EntitySet(Of CHITIETBAOCAODOANHTHU)
	
	Private _CHITIETBAOCAOMATDOs As EntitySet(Of CHITIETBAOCAOMATDO)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnMaBaoCaoChanging(value As String)
    End Sub
    Partial Private Sub OnMaBaoCaoChanged()
    End Sub
    Partial Private Sub OnTenLoaiBaoCaoChanging(value As String)
    End Sub
    Partial Private Sub OnTenLoaiBaoCaoChanged()
    End Sub
    Partial Private Sub OnThangBaoCaoChanging(value As Integer)
    End Sub
    Partial Private Sub OnThangBaoCaoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._CHITIETBAOCAODOANHTHUs = New EntitySet(Of CHITIETBAOCAODOANHTHU)(AddressOf Me.attach_CHITIETBAOCAODOANHTHUs, AddressOf Me.detach_CHITIETBAOCAODOANHTHUs)
		Me._CHITIETBAOCAOMATDOs = New EntitySet(Of CHITIETBAOCAOMATDO)(AddressOf Me.attach_CHITIETBAOCAOMATDOs, AddressOf Me.detach_CHITIETBAOCAOMATDOs)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MaBaoCao", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property MaBaoCao() As String
		Get
			Return Me._MaBaoCao
		End Get
		Set
			If (String.Equals(Me._MaBaoCao, value) = false) Then
				Me.OnMaBaoCaoChanging(value)
				Me.SendPropertyChanging
				Me._MaBaoCao = value
				Me.SendPropertyChanged("MaBaoCao")
				Me.OnMaBaoCaoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TenLoaiBaoCao", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property TenLoaiBaoCao() As String
		Get
			Return Me._TenLoaiBaoCao
		End Get
		Set
			If (String.Equals(Me._TenLoaiBaoCao, value) = false) Then
				Me.OnTenLoaiBaoCaoChanging(value)
				Me.SendPropertyChanging
				Me._TenLoaiBaoCao = value
				Me.SendPropertyChanged("TenLoaiBaoCao")
				Me.OnTenLoaiBaoCaoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ThangBaoCao", DbType:="Int NOT NULL")>  _
	Public Property ThangBaoCao() As Integer
		Get
			Return Me._ThangBaoCao
		End Get
		Set
			If ((Me._ThangBaoCao = value)  _
						= false) Then
				Me.OnThangBaoCaoChanging(value)
				Me.SendPropertyChanging
				Me._ThangBaoCao = value
				Me.SendPropertyChanged("ThangBaoCao")
				Me.OnThangBaoCaoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="BAOCAO_CHITIETBAOCAODOANHTHU", Storage:="_CHITIETBAOCAODOANHTHUs", ThisKey:="MaBaoCao", OtherKey:="MaBaoCao")>  _
	Public Property CHITIETBAOCAODOANHTHUs() As EntitySet(Of CHITIETBAOCAODOANHTHU)
		Get
			Return Me._CHITIETBAOCAODOANHTHUs
		End Get
		Set
			Me._CHITIETBAOCAODOANHTHUs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="BAOCAO_CHITIETBAOCAOMATDO", Storage:="_CHITIETBAOCAOMATDOs", ThisKey:="MaBaoCao", OtherKey:="MaBaoCao")>  _
	Public Property CHITIETBAOCAOMATDOs() As EntitySet(Of CHITIETBAOCAOMATDO)
		Get
			Return Me._CHITIETBAOCAOMATDOs
		End Get
		Set
			Me._CHITIETBAOCAOMATDOs.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_CHITIETBAOCAODOANHTHUs(ByVal entity As CHITIETBAOCAODOANHTHU)
		Me.SendPropertyChanging
		entity.BAOCAO = Me
	End Sub
	
	Private Sub detach_CHITIETBAOCAODOANHTHUs(ByVal entity As CHITIETBAOCAODOANHTHU)
		Me.SendPropertyChanging
		entity.BAOCAO = Nothing
	End Sub
	
	Private Sub attach_CHITIETBAOCAOMATDOs(ByVal entity As CHITIETBAOCAOMATDO)
		Me.SendPropertyChanging
		entity.BAOCAO = Me
	End Sub
	
	Private Sub detach_CHITIETBAOCAOMATDOs(ByVal entity As CHITIETBAOCAOMATDO)
		Me.SendPropertyChanging
		entity.BAOCAO = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CHITIETBAOCAODOANHTHU")>  _
Partial Public Class CHITIETBAOCAODOANHTHU
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _MaChiTietBaoCaoDoanhThu As String
	
	Private _MaBaoCao As String
	
	Private _MaLoaiPhong As String
	
	Private _DoanhThuTungLoaiPhong As Double
	
	Private _TyLeDoanhThuTheoTungLoaiPhong As Integer
	
	Private _BAOCAO As EntityRef(Of BAOCAO)
	
	Private _LOAIPHONG As EntityRef(Of LOAIPHONG)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnMaChiTietBaoCaoDoanhThuChanging(value As String)
    End Sub
    Partial Private Sub OnMaChiTietBaoCaoDoanhThuChanged()
    End Sub
    Partial Private Sub OnMaBaoCaoChanging(value As String)
    End Sub
    Partial Private Sub OnMaBaoCaoChanged()
    End Sub
    Partial Private Sub OnMaLoaiPhongChanging(value As String)
    End Sub
    Partial Private Sub OnMaLoaiPhongChanged()
    End Sub
    Partial Private Sub OnDoanhThuTungLoaiPhongChanging(value As Double)
    End Sub
    Partial Private Sub OnDoanhThuTungLoaiPhongChanged()
    End Sub
    Partial Private Sub OnTyLeDoanhThuTheoTungLoaiPhongChanging(value As Integer)
    End Sub
    Partial Private Sub OnTyLeDoanhThuTheoTungLoaiPhongChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._BAOCAO = CType(Nothing, EntityRef(Of BAOCAO))
		Me._LOAIPHONG = CType(Nothing, EntityRef(Of LOAIPHONG))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MaChiTietBaoCaoDoanhThu", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property MaChiTietBaoCaoDoanhThu() As String
		Get
			Return Me._MaChiTietBaoCaoDoanhThu
		End Get
		Set
			If (String.Equals(Me._MaChiTietBaoCaoDoanhThu, value) = false) Then
				Me.OnMaChiTietBaoCaoDoanhThuChanging(value)
				Me.SendPropertyChanging
				Me._MaChiTietBaoCaoDoanhThu = value
				Me.SendPropertyChanged("MaChiTietBaoCaoDoanhThu")
				Me.OnMaChiTietBaoCaoDoanhThuChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MaBaoCao", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property MaBaoCao() As String
		Get
			Return Me._MaBaoCao
		End Get
		Set
			If (String.Equals(Me._MaBaoCao, value) = false) Then
				If Me._BAOCAO.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMaBaoCaoChanging(value)
				Me.SendPropertyChanging
				Me._MaBaoCao = value
				Me.SendPropertyChanged("MaBaoCao")
				Me.OnMaBaoCaoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MaLoaiPhong", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property MaLoaiPhong() As String
		Get
			Return Me._MaLoaiPhong
		End Get
		Set
			If (String.Equals(Me._MaLoaiPhong, value) = false) Then
				If Me._LOAIPHONG.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMaLoaiPhongChanging(value)
				Me.SendPropertyChanging
				Me._MaLoaiPhong = value
				Me.SendPropertyChanged("MaLoaiPhong")
				Me.OnMaLoaiPhongChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DoanhThuTungLoaiPhong", DbType:="Float NOT NULL")>  _
	Public Property DoanhThuTungLoaiPhong() As Double
		Get
			Return Me._DoanhThuTungLoaiPhong
		End Get
		Set
			If ((Me._DoanhThuTungLoaiPhong = value)  _
						= false) Then
				Me.OnDoanhThuTungLoaiPhongChanging(value)
				Me.SendPropertyChanging
				Me._DoanhThuTungLoaiPhong = value
				Me.SendPropertyChanged("DoanhThuTungLoaiPhong")
				Me.OnDoanhThuTungLoaiPhongChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TyLeDoanhThuTheoTungLoaiPhong", DbType:="Int NOT NULL")>  _
	Public Property TyLeDoanhThuTheoTungLoaiPhong() As Integer
		Get
			Return Me._TyLeDoanhThuTheoTungLoaiPhong
		End Get
		Set
			If ((Me._TyLeDoanhThuTheoTungLoaiPhong = value)  _
						= false) Then
				Me.OnTyLeDoanhThuTheoTungLoaiPhongChanging(value)
				Me.SendPropertyChanging
				Me._TyLeDoanhThuTheoTungLoaiPhong = value
				Me.SendPropertyChanged("TyLeDoanhThuTheoTungLoaiPhong")
				Me.OnTyLeDoanhThuTheoTungLoaiPhongChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="BAOCAO_CHITIETBAOCAODOANHTHU", Storage:="_BAOCAO", ThisKey:="MaBaoCao", OtherKey:="MaBaoCao", IsForeignKey:=true)>  _
	Public Property BAOCAO() As BAOCAO
		Get
			Return Me._BAOCAO.Entity
		End Get
		Set
			Dim previousValue As BAOCAO = Me._BAOCAO.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._BAOCAO.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._BAOCAO.Entity = Nothing
					previousValue.CHITIETBAOCAODOANHTHUs.Remove(Me)
				End If
				Me._BAOCAO.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CHITIETBAOCAODOANHTHUs.Add(Me)
					Me._MaBaoCao = value.MaBaoCao
				Else
					Me._MaBaoCao = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("BAOCAO")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="LOAIPHONG_CHITIETBAOCAODOANHTHU", Storage:="_LOAIPHONG", ThisKey:="MaLoaiPhong", OtherKey:="MaLoaiPhong", IsForeignKey:=true)>  _
	Public Property LOAIPHONG() As LOAIPHONG
		Get
			Return Me._LOAIPHONG.Entity
		End Get
		Set
			Dim previousValue As LOAIPHONG = Me._LOAIPHONG.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._LOAIPHONG.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._LOAIPHONG.Entity = Nothing
					previousValue.CHITIETBAOCAODOANHTHUs.Remove(Me)
				End If
				Me._LOAIPHONG.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CHITIETBAOCAODOANHTHUs.Add(Me)
					Me._MaLoaiPhong = value.MaLoaiPhong
				Else
					Me._MaLoaiPhong = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("LOAIPHONG")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CHITIETBAOCAOMATDO")>  _
Partial Public Class CHITIETBAOCAOMATDO
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _MaChiTietBaoCaoMatDo As String
	
	Private _MaBaoCao As String
	
	Private _MaPhong As String
	
	Private _TongSoNgayThue As Integer
	
	Private _TyLeMatDoSuDungPhong As Integer
	
	Private _BAOCAO As EntityRef(Of BAOCAO)
	
	Private _PHONG As EntityRef(Of PHONG)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnMaChiTietBaoCaoMatDoChanging(value As String)
    End Sub
    Partial Private Sub OnMaChiTietBaoCaoMatDoChanged()
    End Sub
    Partial Private Sub OnMaBaoCaoChanging(value As String)
    End Sub
    Partial Private Sub OnMaBaoCaoChanged()
    End Sub
    Partial Private Sub OnMaPhongChanging(value As String)
    End Sub
    Partial Private Sub OnMaPhongChanged()
    End Sub
    Partial Private Sub OnTongSoNgayThueChanging(value As Integer)
    End Sub
    Partial Private Sub OnTongSoNgayThueChanged()
    End Sub
    Partial Private Sub OnTyLeMatDoSuDungPhongChanging(value As Integer)
    End Sub
    Partial Private Sub OnTyLeMatDoSuDungPhongChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._BAOCAO = CType(Nothing, EntityRef(Of BAOCAO))
		Me._PHONG = CType(Nothing, EntityRef(Of PHONG))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MaChiTietBaoCaoMatDo", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property MaChiTietBaoCaoMatDo() As String
		Get
			Return Me._MaChiTietBaoCaoMatDo
		End Get
		Set
			If (String.Equals(Me._MaChiTietBaoCaoMatDo, value) = false) Then
				Me.OnMaChiTietBaoCaoMatDoChanging(value)
				Me.SendPropertyChanging
				Me._MaChiTietBaoCaoMatDo = value
				Me.SendPropertyChanged("MaChiTietBaoCaoMatDo")
				Me.OnMaChiTietBaoCaoMatDoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MaBaoCao", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property MaBaoCao() As String
		Get
			Return Me._MaBaoCao
		End Get
		Set
			If (String.Equals(Me._MaBaoCao, value) = false) Then
				If Me._BAOCAO.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMaBaoCaoChanging(value)
				Me.SendPropertyChanging
				Me._MaBaoCao = value
				Me.SendPropertyChanged("MaBaoCao")
				Me.OnMaBaoCaoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MaPhong", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property MaPhong() As String
		Get
			Return Me._MaPhong
		End Get
		Set
			If (String.Equals(Me._MaPhong, value) = false) Then
				If Me._PHONG.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMaPhongChanging(value)
				Me.SendPropertyChanging
				Me._MaPhong = value
				Me.SendPropertyChanged("MaPhong")
				Me.OnMaPhongChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TongSoNgayThue", DbType:="Int NOT NULL")>  _
	Public Property TongSoNgayThue() As Integer
		Get
			Return Me._TongSoNgayThue
		End Get
		Set
			If ((Me._TongSoNgayThue = value)  _
						= false) Then
				Me.OnTongSoNgayThueChanging(value)
				Me.SendPropertyChanging
				Me._TongSoNgayThue = value
				Me.SendPropertyChanged("TongSoNgayThue")
				Me.OnTongSoNgayThueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TyLeMatDoSuDungPhong", DbType:="Int NOT NULL")>  _
	Public Property TyLeMatDoSuDungPhong() As Integer
		Get
			Return Me._TyLeMatDoSuDungPhong
		End Get
		Set
			If ((Me._TyLeMatDoSuDungPhong = value)  _
						= false) Then
				Me.OnTyLeMatDoSuDungPhongChanging(value)
				Me.SendPropertyChanging
				Me._TyLeMatDoSuDungPhong = value
				Me.SendPropertyChanged("TyLeMatDoSuDungPhong")
				Me.OnTyLeMatDoSuDungPhongChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="BAOCAO_CHITIETBAOCAOMATDO", Storage:="_BAOCAO", ThisKey:="MaBaoCao", OtherKey:="MaBaoCao", IsForeignKey:=true)>  _
	Public Property BAOCAO() As BAOCAO
		Get
			Return Me._BAOCAO.Entity
		End Get
		Set
			Dim previousValue As BAOCAO = Me._BAOCAO.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._BAOCAO.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._BAOCAO.Entity = Nothing
					previousValue.CHITIETBAOCAOMATDOs.Remove(Me)
				End If
				Me._BAOCAO.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CHITIETBAOCAOMATDOs.Add(Me)
					Me._MaBaoCao = value.MaBaoCao
				Else
					Me._MaBaoCao = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("BAOCAO")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PHONG_CHITIETBAOCAOMATDO", Storage:="_PHONG", ThisKey:="MaPhong", OtherKey:="MaPhong", IsForeignKey:=true)>  _
	Public Property PHONG() As PHONG
		Get
			Return Me._PHONG.Entity
		End Get
		Set
			Dim previousValue As PHONG = Me._PHONG.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PHONG.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PHONG.Entity = Nothing
					previousValue.CHITIETBAOCAOMATDOs.Remove(Me)
				End If
				Me._PHONG.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CHITIETBAOCAOMATDOs.Add(Me)
					Me._MaPhong = value.MaPhong
				Else
					Me._MaPhong = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("PHONG")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CHITIETHOADON")>  _
Partial Public Class CHITIETHOADON
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _MaChiTietHoaDon As String
	
	Private _MaHoaDon As String
	
	Private _MaPhieuThue As String
	
	Private _SoNgayThue As Integer
	
	Private _ThanhTienTheoTungPhong As Double
	
	Private _HOADON As EntityRef(Of HOADON)
	
	Private _PHIEUTHUE As EntityRef(Of PHIEUTHUE)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnMaChiTietHoaDonChanging(value As String)
    End Sub
    Partial Private Sub OnMaChiTietHoaDonChanged()
    End Sub
    Partial Private Sub OnMaHoaDonChanging(value As String)
    End Sub
    Partial Private Sub OnMaHoaDonChanged()
    End Sub
    Partial Private Sub OnMaPhieuThueChanging(value As String)
    End Sub
    Partial Private Sub OnMaPhieuThueChanged()
    End Sub
    Partial Private Sub OnSoNgayThueChanging(value As Integer)
    End Sub
    Partial Private Sub OnSoNgayThueChanged()
    End Sub
    Partial Private Sub OnThanhTienTheoTungPhongChanging(value As Double)
    End Sub
    Partial Private Sub OnThanhTienTheoTungPhongChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._HOADON = CType(Nothing, EntityRef(Of HOADON))
		Me._PHIEUTHUE = CType(Nothing, EntityRef(Of PHIEUTHUE))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MaChiTietHoaDon", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property MaChiTietHoaDon() As String
		Get
			Return Me._MaChiTietHoaDon
		End Get
		Set
			If (String.Equals(Me._MaChiTietHoaDon, value) = false) Then
				Me.OnMaChiTietHoaDonChanging(value)
				Me.SendPropertyChanging
				Me._MaChiTietHoaDon = value
				Me.SendPropertyChanged("MaChiTietHoaDon")
				Me.OnMaChiTietHoaDonChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MaHoaDon", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property MaHoaDon() As String
		Get
			Return Me._MaHoaDon
		End Get
		Set
			If (String.Equals(Me._MaHoaDon, value) = false) Then
				If Me._HOADON.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMaHoaDonChanging(value)
				Me.SendPropertyChanging
				Me._MaHoaDon = value
				Me.SendPropertyChanged("MaHoaDon")
				Me.OnMaHoaDonChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MaPhieuThue", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property MaPhieuThue() As String
		Get
			Return Me._MaPhieuThue
		End Get
		Set
			If (String.Equals(Me._MaPhieuThue, value) = false) Then
				If Me._PHIEUTHUE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMaPhieuThueChanging(value)
				Me.SendPropertyChanging
				Me._MaPhieuThue = value
				Me.SendPropertyChanged("MaPhieuThue")
				Me.OnMaPhieuThueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SoNgayThue", DbType:="Int NOT NULL")>  _
	Public Property SoNgayThue() As Integer
		Get
			Return Me._SoNgayThue
		End Get
		Set
			If ((Me._SoNgayThue = value)  _
						= false) Then
				Me.OnSoNgayThueChanging(value)
				Me.SendPropertyChanging
				Me._SoNgayThue = value
				Me.SendPropertyChanged("SoNgayThue")
				Me.OnSoNgayThueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ThanhTienTheoTungPhong", DbType:="Float NOT NULL")>  _
	Public Property ThanhTienTheoTungPhong() As Double
		Get
			Return Me._ThanhTienTheoTungPhong
		End Get
		Set
			If ((Me._ThanhTienTheoTungPhong = value)  _
						= false) Then
				Me.OnThanhTienTheoTungPhongChanging(value)
				Me.SendPropertyChanging
				Me._ThanhTienTheoTungPhong = value
				Me.SendPropertyChanged("ThanhTienTheoTungPhong")
				Me.OnThanhTienTheoTungPhongChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="HOADON_CHITIETHOADON", Storage:="_HOADON", ThisKey:="MaHoaDon", OtherKey:="MaHoaDon", IsForeignKey:=true)>  _
	Public Property HOADON() As HOADON
		Get
			Return Me._HOADON.Entity
		End Get
		Set
			Dim previousValue As HOADON = Me._HOADON.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._HOADON.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._HOADON.Entity = Nothing
					previousValue.CHITIETHOADONs.Remove(Me)
				End If
				Me._HOADON.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CHITIETHOADONs.Add(Me)
					Me._MaHoaDon = value.MaHoaDon
				Else
					Me._MaHoaDon = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("HOADON")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PHIEUTHUE_CHITIETHOADON", Storage:="_PHIEUTHUE", ThisKey:="MaPhieuThue", OtherKey:="MaPhieuThue", IsForeignKey:=true)>  _
	Public Property PHIEUTHUE() As PHIEUTHUE
		Get
			Return Me._PHIEUTHUE.Entity
		End Get
		Set
			Dim previousValue As PHIEUTHUE = Me._PHIEUTHUE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PHIEUTHUE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PHIEUTHUE.Entity = Nothing
					previousValue.CHITIETHOADONs.Remove(Me)
				End If
				Me._PHIEUTHUE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CHITIETHOADONs.Add(Me)
					Me._MaPhieuThue = value.MaPhieuThue
				Else
					Me._MaPhieuThue = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("PHIEUTHUE")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CHITIETPHIEUTHUE")>  _
Partial Public Class CHITIETPHIEUTHUE
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _MaChiTietPhieuThue As String
	
	Private _MaPhieuThue As String
	
	Private _MaKhachHang As String
	
	Private _KHACHHANG As EntityRef(Of KHACHHANG)
	
	Private _PHIEUTHUE As EntityRef(Of PHIEUTHUE)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnMaChiTietPhieuThueChanging(value As String)
    End Sub
    Partial Private Sub OnMaChiTietPhieuThueChanged()
    End Sub
    Partial Private Sub OnMaPhieuThueChanging(value As String)
    End Sub
    Partial Private Sub OnMaPhieuThueChanged()
    End Sub
    Partial Private Sub OnMaKhachHangChanging(value As String)
    End Sub
    Partial Private Sub OnMaKhachHangChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._KHACHHANG = CType(Nothing, EntityRef(Of KHACHHANG))
		Me._PHIEUTHUE = CType(Nothing, EntityRef(Of PHIEUTHUE))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MaChiTietPhieuThue", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property MaChiTietPhieuThue() As String
		Get
			Return Me._MaChiTietPhieuThue
		End Get
		Set
			If (String.Equals(Me._MaChiTietPhieuThue, value) = false) Then
				Me.OnMaChiTietPhieuThueChanging(value)
				Me.SendPropertyChanging
				Me._MaChiTietPhieuThue = value
				Me.SendPropertyChanged("MaChiTietPhieuThue")
				Me.OnMaChiTietPhieuThueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MaPhieuThue", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property MaPhieuThue() As String
		Get
			Return Me._MaPhieuThue
		End Get
		Set
			If (String.Equals(Me._MaPhieuThue, value) = false) Then
				If Me._PHIEUTHUE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMaPhieuThueChanging(value)
				Me.SendPropertyChanging
				Me._MaPhieuThue = value
				Me.SendPropertyChanged("MaPhieuThue")
				Me.OnMaPhieuThueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MaKhachHang", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property MaKhachHang() As String
		Get
			Return Me._MaKhachHang
		End Get
		Set
			If (String.Equals(Me._MaKhachHang, value) = false) Then
				If Me._KHACHHANG.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMaKhachHangChanging(value)
				Me.SendPropertyChanging
				Me._MaKhachHang = value
				Me.SendPropertyChanged("MaKhachHang")
				Me.OnMaKhachHangChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="KHACHHANG_CHITIETPHIEUTHUE", Storage:="_KHACHHANG", ThisKey:="MaKhachHang", OtherKey:="MaKhachHang", IsForeignKey:=true)>  _
	Public Property KHACHHANG() As KHACHHANG
		Get
			Return Me._KHACHHANG.Entity
		End Get
		Set
			Dim previousValue As KHACHHANG = Me._KHACHHANG.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._KHACHHANG.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._KHACHHANG.Entity = Nothing
					previousValue.CHITIETPHIEUTHUEs.Remove(Me)
				End If
				Me._KHACHHANG.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CHITIETPHIEUTHUEs.Add(Me)
					Me._MaKhachHang = value.MaKhachHang
				Else
					Me._MaKhachHang = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("KHACHHANG")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PHIEUTHUE_CHITIETPHIEUTHUE", Storage:="_PHIEUTHUE", ThisKey:="MaPhieuThue", OtherKey:="MaPhieuThue", IsForeignKey:=true)>  _
	Public Property PHIEUTHUE() As PHIEUTHUE
		Get
			Return Me._PHIEUTHUE.Entity
		End Get
		Set
			Dim previousValue As PHIEUTHUE = Me._PHIEUTHUE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PHIEUTHUE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PHIEUTHUE.Entity = Nothing
					previousValue.CHITIETPHIEUTHUEs.Remove(Me)
				End If
				Me._PHIEUTHUE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CHITIETPHIEUTHUEs.Add(Me)
					Me._MaPhieuThue = value.MaPhieuThue
				Else
					Me._MaPhieuThue = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("PHIEUTHUE")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.HOADON")>  _
Partial Public Class HOADON
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _MaHoaDon As String
	
	Private _MaKhachHang As String
	
	Private _NgayLapHoaDon As Date
	
	Private _TriGiaHoaDon As Double
	
	Private _CHITIETHOADONs As EntitySet(Of CHITIETHOADON)
	
	Private _KHACHHANG As EntityRef(Of KHACHHANG)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnMaHoaDonChanging(value As String)
    End Sub
    Partial Private Sub OnMaHoaDonChanged()
    End Sub
    Partial Private Sub OnMaKhachHangChanging(value As String)
    End Sub
    Partial Private Sub OnMaKhachHangChanged()
    End Sub
    Partial Private Sub OnNgayLapHoaDonChanging(value As Date)
    End Sub
    Partial Private Sub OnNgayLapHoaDonChanged()
    End Sub
    Partial Private Sub OnTriGiaHoaDonChanging(value As Double)
    End Sub
    Partial Private Sub OnTriGiaHoaDonChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._CHITIETHOADONs = New EntitySet(Of CHITIETHOADON)(AddressOf Me.attach_CHITIETHOADONs, AddressOf Me.detach_CHITIETHOADONs)
		Me._KHACHHANG = CType(Nothing, EntityRef(Of KHACHHANG))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MaHoaDon", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property MaHoaDon() As String
		Get
			Return Me._MaHoaDon
		End Get
		Set
			If (String.Equals(Me._MaHoaDon, value) = false) Then
				Me.OnMaHoaDonChanging(value)
				Me.SendPropertyChanging
				Me._MaHoaDon = value
				Me.SendPropertyChanged("MaHoaDon")
				Me.OnMaHoaDonChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MaKhachHang", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property MaKhachHang() As String
		Get
			Return Me._MaKhachHang
		End Get
		Set
			If (String.Equals(Me._MaKhachHang, value) = false) Then
				If Me._KHACHHANG.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMaKhachHangChanging(value)
				Me.SendPropertyChanging
				Me._MaKhachHang = value
				Me.SendPropertyChanged("MaKhachHang")
				Me.OnMaKhachHangChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NgayLapHoaDon", DbType:="DateTime NOT NULL")>  _
	Public Property NgayLapHoaDon() As Date
		Get
			Return Me._NgayLapHoaDon
		End Get
		Set
			If ((Me._NgayLapHoaDon = value)  _
						= false) Then
				Me.OnNgayLapHoaDonChanging(value)
				Me.SendPropertyChanging
				Me._NgayLapHoaDon = value
				Me.SendPropertyChanged("NgayLapHoaDon")
				Me.OnNgayLapHoaDonChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TriGiaHoaDon", DbType:="Float NOT NULL")>  _
	Public Property TriGiaHoaDon() As Double
		Get
			Return Me._TriGiaHoaDon
		End Get
		Set
			If ((Me._TriGiaHoaDon = value)  _
						= false) Then
				Me.OnTriGiaHoaDonChanging(value)
				Me.SendPropertyChanging
				Me._TriGiaHoaDon = value
				Me.SendPropertyChanged("TriGiaHoaDon")
				Me.OnTriGiaHoaDonChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="HOADON_CHITIETHOADON", Storage:="_CHITIETHOADONs", ThisKey:="MaHoaDon", OtherKey:="MaHoaDon")>  _
	Public Property CHITIETHOADONs() As EntitySet(Of CHITIETHOADON)
		Get
			Return Me._CHITIETHOADONs
		End Get
		Set
			Me._CHITIETHOADONs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="KHACHHANG_HOADON", Storage:="_KHACHHANG", ThisKey:="MaKhachHang", OtherKey:="MaKhachHang", IsForeignKey:=true)>  _
	Public Property KHACHHANG() As KHACHHANG
		Get
			Return Me._KHACHHANG.Entity
		End Get
		Set
			Dim previousValue As KHACHHANG = Me._KHACHHANG.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._KHACHHANG.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._KHACHHANG.Entity = Nothing
					previousValue.HOADONs.Remove(Me)
				End If
				Me._KHACHHANG.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.HOADONs.Add(Me)
					Me._MaKhachHang = value.MaKhachHang
				Else
					Me._MaKhachHang = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("KHACHHANG")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_CHITIETHOADONs(ByVal entity As CHITIETHOADON)
		Me.SendPropertyChanging
		entity.HOADON = Me
	End Sub
	
	Private Sub detach_CHITIETHOADONs(ByVal entity As CHITIETHOADON)
		Me.SendPropertyChanging
		entity.HOADON = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.KHACHHANG")>  _
Partial Public Class KHACHHANG
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _MaKhachHang As String
	
	Private _TenKhachHang As String
	
	Private _MaLoaiKhachHang As String
	
	Private _CMND As Integer
	
	Private _DiaChi As String
	
	Private _CHITIETPHIEUTHUEs As EntitySet(Of CHITIETPHIEUTHUE)
	
	Private _HOADONs As EntitySet(Of HOADON)
	
	Private _LOAIKHACHHANG As EntityRef(Of LOAIKHACHHANG)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnMaKhachHangChanging(value As String)
    End Sub
    Partial Private Sub OnMaKhachHangChanged()
    End Sub
    Partial Private Sub OnTenKhachHangChanging(value As String)
    End Sub
    Partial Private Sub OnTenKhachHangChanged()
    End Sub
    Partial Private Sub OnMaLoaiKhachHangChanging(value As String)
    End Sub
    Partial Private Sub OnMaLoaiKhachHangChanged()
    End Sub
    Partial Private Sub OnCMNDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCMNDChanged()
    End Sub
    Partial Private Sub OnDiaChiChanging(value As String)
    End Sub
    Partial Private Sub OnDiaChiChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._CHITIETPHIEUTHUEs = New EntitySet(Of CHITIETPHIEUTHUE)(AddressOf Me.attach_CHITIETPHIEUTHUEs, AddressOf Me.detach_CHITIETPHIEUTHUEs)
		Me._HOADONs = New EntitySet(Of HOADON)(AddressOf Me.attach_HOADONs, AddressOf Me.detach_HOADONs)
		Me._LOAIKHACHHANG = CType(Nothing, EntityRef(Of LOAIKHACHHANG))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MaKhachHang", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property MaKhachHang() As String
		Get
			Return Me._MaKhachHang
		End Get
		Set
			If (String.Equals(Me._MaKhachHang, value) = false) Then
				Me.OnMaKhachHangChanging(value)
				Me.SendPropertyChanging
				Me._MaKhachHang = value
				Me.SendPropertyChanged("MaKhachHang")
				Me.OnMaKhachHangChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TenKhachHang", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property TenKhachHang() As String
		Get
			Return Me._TenKhachHang
		End Get
		Set
			If (String.Equals(Me._TenKhachHang, value) = false) Then
				Me.OnTenKhachHangChanging(value)
				Me.SendPropertyChanging
				Me._TenKhachHang = value
				Me.SendPropertyChanged("TenKhachHang")
				Me.OnTenKhachHangChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MaLoaiKhachHang", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property MaLoaiKhachHang() As String
		Get
			Return Me._MaLoaiKhachHang
		End Get
		Set
			If (String.Equals(Me._MaLoaiKhachHang, value) = false) Then
				If Me._LOAIKHACHHANG.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMaLoaiKhachHangChanging(value)
				Me.SendPropertyChanging
				Me._MaLoaiKhachHang = value
				Me.SendPropertyChanged("MaLoaiKhachHang")
				Me.OnMaLoaiKhachHangChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CMND", DbType:="Int NOT NULL")>  _
	Public Property CMND() As Integer
		Get
			Return Me._CMND
		End Get
		Set
			If ((Me._CMND = value)  _
						= false) Then
				Me.OnCMNDChanging(value)
				Me.SendPropertyChanging
				Me._CMND = value
				Me.SendPropertyChanged("CMND")
				Me.OnCMNDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DiaChi", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property DiaChi() As String
		Get
			Return Me._DiaChi
		End Get
		Set
			If (String.Equals(Me._DiaChi, value) = false) Then
				Me.OnDiaChiChanging(value)
				Me.SendPropertyChanging
				Me._DiaChi = value
				Me.SendPropertyChanged("DiaChi")
				Me.OnDiaChiChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="KHACHHANG_CHITIETPHIEUTHUE", Storage:="_CHITIETPHIEUTHUEs", ThisKey:="MaKhachHang", OtherKey:="MaKhachHang")>  _
	Public Property CHITIETPHIEUTHUEs() As EntitySet(Of CHITIETPHIEUTHUE)
		Get
			Return Me._CHITIETPHIEUTHUEs
		End Get
		Set
			Me._CHITIETPHIEUTHUEs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="KHACHHANG_HOADON", Storage:="_HOADONs", ThisKey:="MaKhachHang", OtherKey:="MaKhachHang")>  _
	Public Property HOADONs() As EntitySet(Of HOADON)
		Get
			Return Me._HOADONs
		End Get
		Set
			Me._HOADONs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="LOAIKHACHHANG_KHACHHANG", Storage:="_LOAIKHACHHANG", ThisKey:="MaLoaiKhachHang", OtherKey:="MaLoaiKhachHang", IsForeignKey:=true)>  _
	Public Property LOAIKHACHHANG() As LOAIKHACHHANG
		Get
			Return Me._LOAIKHACHHANG.Entity
		End Get
		Set
			Dim previousValue As LOAIKHACHHANG = Me._LOAIKHACHHANG.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._LOAIKHACHHANG.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._LOAIKHACHHANG.Entity = Nothing
					previousValue.KHACHHANGs.Remove(Me)
				End If
				Me._LOAIKHACHHANG.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.KHACHHANGs.Add(Me)
					Me._MaLoaiKhachHang = value.MaLoaiKhachHang
				Else
					Me._MaLoaiKhachHang = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("LOAIKHACHHANG")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_CHITIETPHIEUTHUEs(ByVal entity As CHITIETPHIEUTHUE)
		Me.SendPropertyChanging
		entity.KHACHHANG = Me
	End Sub
	
	Private Sub detach_CHITIETPHIEUTHUEs(ByVal entity As CHITIETPHIEUTHUE)
		Me.SendPropertyChanging
		entity.KHACHHANG = Nothing
	End Sub
	
	Private Sub attach_HOADONs(ByVal entity As HOADON)
		Me.SendPropertyChanging
		entity.KHACHHANG = Me
	End Sub
	
	Private Sub detach_HOADONs(ByVal entity As HOADON)
		Me.SendPropertyChanging
		entity.KHACHHANG = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.LOAIKHACHHANG")>  _
Partial Public Class LOAIKHACHHANG
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _MaLoaiKhachHang As String
	
	Private _TenLoaiKhachHang As String
	
	Private _KHACHHANGs As EntitySet(Of KHACHHANG)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnMaLoaiKhachHangChanging(value As String)
    End Sub
    Partial Private Sub OnMaLoaiKhachHangChanged()
    End Sub
    Partial Private Sub OnTenLoaiKhachHangChanging(value As String)
    End Sub
    Partial Private Sub OnTenLoaiKhachHangChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._KHACHHANGs = New EntitySet(Of KHACHHANG)(AddressOf Me.attach_KHACHHANGs, AddressOf Me.detach_KHACHHANGs)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MaLoaiKhachHang", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property MaLoaiKhachHang() As String
		Get
			Return Me._MaLoaiKhachHang
		End Get
		Set
			If (String.Equals(Me._MaLoaiKhachHang, value) = false) Then
				Me.OnMaLoaiKhachHangChanging(value)
				Me.SendPropertyChanging
				Me._MaLoaiKhachHang = value
				Me.SendPropertyChanged("MaLoaiKhachHang")
				Me.OnMaLoaiKhachHangChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TenLoaiKhachHang", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property TenLoaiKhachHang() As String
		Get
			Return Me._TenLoaiKhachHang
		End Get
		Set
			If (String.Equals(Me._TenLoaiKhachHang, value) = false) Then
				Me.OnTenLoaiKhachHangChanging(value)
				Me.SendPropertyChanging
				Me._TenLoaiKhachHang = value
				Me.SendPropertyChanged("TenLoaiKhachHang")
				Me.OnTenLoaiKhachHangChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="LOAIKHACHHANG_KHACHHANG", Storage:="_KHACHHANGs", ThisKey:="MaLoaiKhachHang", OtherKey:="MaLoaiKhachHang")>  _
	Public Property KHACHHANGs() As EntitySet(Of KHACHHANG)
		Get
			Return Me._KHACHHANGs
		End Get
		Set
			Me._KHACHHANGs.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_KHACHHANGs(ByVal entity As KHACHHANG)
		Me.SendPropertyChanging
		entity.LOAIKHACHHANG = Me
	End Sub
	
	Private Sub detach_KHACHHANGs(ByVal entity As KHACHHANG)
		Me.SendPropertyChanging
		entity.LOAIKHACHHANG = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.LOAIPHONG")>  _
Partial Public Class LOAIPHONG
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _MaLoaiPhong As String
	
	Private _TenLoaiPhong As String
	
	Private _DonGia As Decimal
	
	Private _CHITIETBAOCAODOANHTHUs As EntitySet(Of CHITIETBAOCAODOANHTHU)
	
	Private _PHONGs As EntitySet(Of PHONG)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnMaLoaiPhongChanging(value As String)
    End Sub
    Partial Private Sub OnMaLoaiPhongChanged()
    End Sub
    Partial Private Sub OnTenLoaiPhongChanging(value As String)
    End Sub
    Partial Private Sub OnTenLoaiPhongChanged()
    End Sub
    Partial Private Sub OnDonGiaChanging(value As Decimal)
    End Sub
    Partial Private Sub OnDonGiaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._CHITIETBAOCAODOANHTHUs = New EntitySet(Of CHITIETBAOCAODOANHTHU)(AddressOf Me.attach_CHITIETBAOCAODOANHTHUs, AddressOf Me.detach_CHITIETBAOCAODOANHTHUs)
		Me._PHONGs = New EntitySet(Of PHONG)(AddressOf Me.attach_PHONGs, AddressOf Me.detach_PHONGs)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MaLoaiPhong", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property MaLoaiPhong() As String
		Get
			Return Me._MaLoaiPhong
		End Get
		Set
			If (String.Equals(Me._MaLoaiPhong, value) = false) Then
				Me.OnMaLoaiPhongChanging(value)
				Me.SendPropertyChanging
				Me._MaLoaiPhong = value
				Me.SendPropertyChanged("MaLoaiPhong")
				Me.OnMaLoaiPhongChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TenLoaiPhong", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property TenLoaiPhong() As String
		Get
			Return Me._TenLoaiPhong
		End Get
		Set
			If (String.Equals(Me._TenLoaiPhong, value) = false) Then
				Me.OnTenLoaiPhongChanging(value)
				Me.SendPropertyChanging
				Me._TenLoaiPhong = value
				Me.SendPropertyChanged("TenLoaiPhong")
				Me.OnTenLoaiPhongChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DonGia", DbType:="Money NOT NULL")>  _
	Public Property DonGia() As Decimal
		Get
			Return Me._DonGia
		End Get
		Set
			If ((Me._DonGia = value)  _
						= false) Then
				Me.OnDonGiaChanging(value)
				Me.SendPropertyChanging
				Me._DonGia = value
				Me.SendPropertyChanged("DonGia")
				Me.OnDonGiaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="LOAIPHONG_CHITIETBAOCAODOANHTHU", Storage:="_CHITIETBAOCAODOANHTHUs", ThisKey:="MaLoaiPhong", OtherKey:="MaLoaiPhong")>  _
	Public Property CHITIETBAOCAODOANHTHUs() As EntitySet(Of CHITIETBAOCAODOANHTHU)
		Get
			Return Me._CHITIETBAOCAODOANHTHUs
		End Get
		Set
			Me._CHITIETBAOCAODOANHTHUs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="LOAIPHONG_PHONG", Storage:="_PHONGs", ThisKey:="MaLoaiPhong", OtherKey:="MaLoaiPhong")>  _
	Public Property PHONGs() As EntitySet(Of PHONG)
		Get
			Return Me._PHONGs
		End Get
		Set
			Me._PHONGs.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_CHITIETBAOCAODOANHTHUs(ByVal entity As CHITIETBAOCAODOANHTHU)
		Me.SendPropertyChanging
		entity.LOAIPHONG = Me
	End Sub
	
	Private Sub detach_CHITIETBAOCAODOANHTHUs(ByVal entity As CHITIETBAOCAODOANHTHU)
		Me.SendPropertyChanging
		entity.LOAIPHONG = Nothing
	End Sub
	
	Private Sub attach_PHONGs(ByVal entity As PHONG)
		Me.SendPropertyChanging
		entity.LOAIPHONG = Me
	End Sub
	
	Private Sub detach_PHONGs(ByVal entity As PHONG)
		Me.SendPropertyChanging
		entity.LOAIPHONG = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.PHONG")>  _
Partial Public Class PHONG
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _MaPhong As String
	
	Private _TenPhong As String
	
	Private _MaLoaiPhong As String
	
	Private _GhiChu As String
	
	Private _TinhTrangPhong As String
	
	Private _CHITIETBAOCAOMATDOs As EntitySet(Of CHITIETBAOCAOMATDO)
	
	Private _PHIEUTHUEs As EntitySet(Of PHIEUTHUE)
	
	Private _LOAIPHONG As EntityRef(Of LOAIPHONG)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnMaPhongChanging(value As String)
    End Sub
    Partial Private Sub OnMaPhongChanged()
    End Sub
    Partial Private Sub OnTenPhongChanging(value As String)
    End Sub
    Partial Private Sub OnTenPhongChanged()
    End Sub
    Partial Private Sub OnMaLoaiPhongChanging(value As String)
    End Sub
    Partial Private Sub OnMaLoaiPhongChanged()
    End Sub
    Partial Private Sub OnGhiChuChanging(value As String)
    End Sub
    Partial Private Sub OnGhiChuChanged()
    End Sub
    Partial Private Sub OnTinhTrangPhongChanging(value As String)
    End Sub
    Partial Private Sub OnTinhTrangPhongChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._CHITIETBAOCAOMATDOs = New EntitySet(Of CHITIETBAOCAOMATDO)(AddressOf Me.attach_CHITIETBAOCAOMATDOs, AddressOf Me.detach_CHITIETBAOCAOMATDOs)
		Me._PHIEUTHUEs = New EntitySet(Of PHIEUTHUE)(AddressOf Me.attach_PHIEUTHUEs, AddressOf Me.detach_PHIEUTHUEs)
		Me._LOAIPHONG = CType(Nothing, EntityRef(Of LOAIPHONG))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MaPhong", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property MaPhong() As String
		Get
			Return Me._MaPhong
		End Get
		Set
			If (String.Equals(Me._MaPhong, value) = false) Then
				Me.OnMaPhongChanging(value)
				Me.SendPropertyChanging
				Me._MaPhong = value
				Me.SendPropertyChanged("MaPhong")
				Me.OnMaPhongChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TenPhong", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property TenPhong() As String
		Get
			Return Me._TenPhong
		End Get
		Set
			If (String.Equals(Me._TenPhong, value) = false) Then
				Me.OnTenPhongChanging(value)
				Me.SendPropertyChanging
				Me._TenPhong = value
				Me.SendPropertyChanged("TenPhong")
				Me.OnTenPhongChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MaLoaiPhong", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property MaLoaiPhong() As String
		Get
			Return Me._MaLoaiPhong
		End Get
		Set
			If (String.Equals(Me._MaLoaiPhong, value) = false) Then
				If Me._LOAIPHONG.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMaLoaiPhongChanging(value)
				Me.SendPropertyChanging
				Me._MaLoaiPhong = value
				Me.SendPropertyChanged("MaLoaiPhong")
				Me.OnMaLoaiPhongChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GhiChu", DbType:="NVarChar(200)")>  _
	Public Property GhiChu() As String
		Get
			Return Me._GhiChu
		End Get
		Set
			If (String.Equals(Me._GhiChu, value) = false) Then
				Me.OnGhiChuChanging(value)
				Me.SendPropertyChanging
				Me._GhiChu = value
				Me.SendPropertyChanged("GhiChu")
				Me.OnGhiChuChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TinhTrangPhong", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property TinhTrangPhong() As String
		Get
			Return Me._TinhTrangPhong
		End Get
		Set
			If (String.Equals(Me._TinhTrangPhong, value) = false) Then
				Me.OnTinhTrangPhongChanging(value)
				Me.SendPropertyChanging
				Me._TinhTrangPhong = value
				Me.SendPropertyChanged("TinhTrangPhong")
				Me.OnTinhTrangPhongChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PHONG_CHITIETBAOCAOMATDO", Storage:="_CHITIETBAOCAOMATDOs", ThisKey:="MaPhong", OtherKey:="MaPhong")>  _
	Public Property CHITIETBAOCAOMATDOs() As EntitySet(Of CHITIETBAOCAOMATDO)
		Get
			Return Me._CHITIETBAOCAOMATDOs
		End Get
		Set
			Me._CHITIETBAOCAOMATDOs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PHONG_PHIEUTHUE", Storage:="_PHIEUTHUEs", ThisKey:="MaPhong", OtherKey:="MaPhong")>  _
	Public Property PHIEUTHUEs() As EntitySet(Of PHIEUTHUE)
		Get
			Return Me._PHIEUTHUEs
		End Get
		Set
			Me._PHIEUTHUEs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="LOAIPHONG_PHONG", Storage:="_LOAIPHONG", ThisKey:="MaLoaiPhong", OtherKey:="MaLoaiPhong", IsForeignKey:=true)>  _
	Public Property LOAIPHONG() As LOAIPHONG
		Get
			Return Me._LOAIPHONG.Entity
		End Get
		Set
			Dim previousValue As LOAIPHONG = Me._LOAIPHONG.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._LOAIPHONG.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._LOAIPHONG.Entity = Nothing
					previousValue.PHONGs.Remove(Me)
				End If
				Me._LOAIPHONG.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PHONGs.Add(Me)
					Me._MaLoaiPhong = value.MaLoaiPhong
				Else
					Me._MaLoaiPhong = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("LOAIPHONG")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_CHITIETBAOCAOMATDOs(ByVal entity As CHITIETBAOCAOMATDO)
		Me.SendPropertyChanging
		entity.PHONG = Me
	End Sub
	
	Private Sub detach_CHITIETBAOCAOMATDOs(ByVal entity As CHITIETBAOCAOMATDO)
		Me.SendPropertyChanging
		entity.PHONG = Nothing
	End Sub
	
	Private Sub attach_PHIEUTHUEs(ByVal entity As PHIEUTHUE)
		Me.SendPropertyChanging
		entity.PHONG = Me
	End Sub
	
	Private Sub detach_PHIEUTHUEs(ByVal entity As PHIEUTHUE)
		Me.SendPropertyChanging
		entity.PHONG = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.LOGIN")>  _
Partial Public Class LOGIN
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _UserID As String
	
	Private _UserName As String
	
	Private _Password As String
	
	Private _Role As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnUserIDChanging(value As String)
    End Sub
    Partial Private Sub OnUserIDChanged()
    End Sub
    Partial Private Sub OnUserNameChanging(value As String)
    End Sub
    Partial Private Sub OnUserNameChanged()
    End Sub
    Partial Private Sub OnPasswordChanging(value As String)
    End Sub
    Partial Private Sub OnPasswordChanged()
    End Sub
    Partial Private Sub OnRoleChanging(value As String)
    End Sub
    Partial Private Sub OnRoleChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", DbType:="Char(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property UserID() As String
		Get
			Return Me._UserID
		End Get
		Set
			If (String.Equals(Me._UserID, value) = false) Then
				Me.OnUserIDChanging(value)
				Me.SendPropertyChanging
				Me._UserID = value
				Me.SendPropertyChanged("UserID")
				Me.OnUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserName", DbType:="Char(50) NOT NULL", CanBeNull:=false)>  _
	Public Property UserName() As String
		Get
			Return Me._UserName
		End Get
		Set
			If (String.Equals(Me._UserName, value) = false) Then
				Me.OnUserNameChanging(value)
				Me.SendPropertyChanging
				Me._UserName = value
				Me.SendPropertyChanged("UserName")
				Me.OnUserNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Password", DbType:="Char(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Password() As String
		Get
			Return Me._Password
		End Get
		Set
			If (String.Equals(Me._Password, value) = false) Then
				Me.OnPasswordChanging(value)
				Me.SendPropertyChanging
				Me._Password = value
				Me.SendPropertyChanged("Password")
				Me.OnPasswordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Role", DbType:="Char(20) NOT NULL", CanBeNull:=false)>  _
	Public Property Role() As String
		Get
			Return Me._Role
		End Get
		Set
			If (String.Equals(Me._Role, value) = false) Then
				Me.OnRoleChanging(value)
				Me.SendPropertyChanging
				Me._Role = value
				Me.SendPropertyChanged("Role")
				Me.OnRoleChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.PHIEUTHUE")>  _
Partial Public Class PHIEUTHUE
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _MaPhieuThue As String
	
	Private _MaPhong As String
	
	Private _NgayBatDauThue As Date
	
	Private _ThanhToan As String
	
	Private _CHITIETHOADONs As EntitySet(Of CHITIETHOADON)
	
	Private _CHITIETPHIEUTHUEs As EntitySet(Of CHITIETPHIEUTHUE)
	
	Private _PHONG As EntityRef(Of PHONG)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnMaPhieuThueChanging(value As String)
    End Sub
    Partial Private Sub OnMaPhieuThueChanged()
    End Sub
    Partial Private Sub OnMaPhongChanging(value As String)
    End Sub
    Partial Private Sub OnMaPhongChanged()
    End Sub
    Partial Private Sub OnNgayBatDauThueChanging(value As Date)
    End Sub
    Partial Private Sub OnNgayBatDauThueChanged()
    End Sub
    Partial Private Sub OnThanhToanChanging(value As String)
    End Sub
    Partial Private Sub OnThanhToanChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._CHITIETHOADONs = New EntitySet(Of CHITIETHOADON)(AddressOf Me.attach_CHITIETHOADONs, AddressOf Me.detach_CHITIETHOADONs)
		Me._CHITIETPHIEUTHUEs = New EntitySet(Of CHITIETPHIEUTHUE)(AddressOf Me.attach_CHITIETPHIEUTHUEs, AddressOf Me.detach_CHITIETPHIEUTHUEs)
		Me._PHONG = CType(Nothing, EntityRef(Of PHONG))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MaPhieuThue", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property MaPhieuThue() As String
		Get
			Return Me._MaPhieuThue
		End Get
		Set
			If (String.Equals(Me._MaPhieuThue, value) = false) Then
				Me.OnMaPhieuThueChanging(value)
				Me.SendPropertyChanging
				Me._MaPhieuThue = value
				Me.SendPropertyChanged("MaPhieuThue")
				Me.OnMaPhieuThueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MaPhong", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property MaPhong() As String
		Get
			Return Me._MaPhong
		End Get
		Set
			If (String.Equals(Me._MaPhong, value) = false) Then
				If Me._PHONG.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMaPhongChanging(value)
				Me.SendPropertyChanging
				Me._MaPhong = value
				Me.SendPropertyChanged("MaPhong")
				Me.OnMaPhongChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NgayBatDauThue", DbType:="DateTime NOT NULL")>  _
	Public Property NgayBatDauThue() As Date
		Get
			Return Me._NgayBatDauThue
		End Get
		Set
			If ((Me._NgayBatDauThue = value)  _
						= false) Then
				Me.OnNgayBatDauThueChanging(value)
				Me.SendPropertyChanging
				Me._NgayBatDauThue = value
				Me.SendPropertyChanged("NgayBatDauThue")
				Me.OnNgayBatDauThueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ThanhToan", DbType:="VarChar(50)")>  _
	Public Property ThanhToan() As String
		Get
			Return Me._ThanhToan
		End Get
		Set
			If (String.Equals(Me._ThanhToan, value) = false) Then
				Me.OnThanhToanChanging(value)
				Me.SendPropertyChanging
				Me._ThanhToan = value
				Me.SendPropertyChanged("ThanhToan")
				Me.OnThanhToanChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PHIEUTHUE_CHITIETHOADON", Storage:="_CHITIETHOADONs", ThisKey:="MaPhieuThue", OtherKey:="MaPhieuThue")>  _
	Public Property CHITIETHOADONs() As EntitySet(Of CHITIETHOADON)
		Get
			Return Me._CHITIETHOADONs
		End Get
		Set
			Me._CHITIETHOADONs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PHIEUTHUE_CHITIETPHIEUTHUE", Storage:="_CHITIETPHIEUTHUEs", ThisKey:="MaPhieuThue", OtherKey:="MaPhieuThue")>  _
	Public Property CHITIETPHIEUTHUEs() As EntitySet(Of CHITIETPHIEUTHUE)
		Get
			Return Me._CHITIETPHIEUTHUEs
		End Get
		Set
			Me._CHITIETPHIEUTHUEs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PHONG_PHIEUTHUE", Storage:="_PHONG", ThisKey:="MaPhong", OtherKey:="MaPhong", IsForeignKey:=true)>  _
	Public Property PHONG() As PHONG
		Get
			Return Me._PHONG.Entity
		End Get
		Set
			Dim previousValue As PHONG = Me._PHONG.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PHONG.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PHONG.Entity = Nothing
					previousValue.PHIEUTHUEs.Remove(Me)
				End If
				Me._PHONG.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PHIEUTHUEs.Add(Me)
					Me._MaPhong = value.MaPhong
				Else
					Me._MaPhong = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("PHONG")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_CHITIETHOADONs(ByVal entity As CHITIETHOADON)
		Me.SendPropertyChanging
		entity.PHIEUTHUE = Me
	End Sub
	
	Private Sub detach_CHITIETHOADONs(ByVal entity As CHITIETHOADON)
		Me.SendPropertyChanging
		entity.PHIEUTHUE = Nothing
	End Sub
	
	Private Sub attach_CHITIETPHIEUTHUEs(ByVal entity As CHITIETPHIEUTHUE)
		Me.SendPropertyChanging
		entity.PHIEUTHUE = Me
	End Sub
	
	Private Sub detach_CHITIETPHIEUTHUEs(ByVal entity As CHITIETPHIEUTHUE)
		Me.SendPropertyChanging
		entity.PHIEUTHUE = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.THAMSO")>  _
Partial Public Class THAMSO
	
	Private _SoLuongKhachHangToiDa As Integer
	
	Private _SoLuongKhachMoiPhong As System.Nullable(Of Integer)
	
	Private _SoLuongKhachNuocNgoai As System.Nullable(Of Integer)
	
	Private _HeSo As Double
	
	Private _TyLePhuThu As Double
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SoLuongKhachHangToiDa", DbType:="Int NOT NULL")>  _
	Public Property SoLuongKhachHangToiDa() As Integer
		Get
			Return Me._SoLuongKhachHangToiDa
		End Get
		Set
			If ((Me._SoLuongKhachHangToiDa = value)  _
						= false) Then
				Me._SoLuongKhachHangToiDa = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SoLuongKhachMoiPhong", DbType:="Int")>  _
	Public Property SoLuongKhachMoiPhong() As System.Nullable(Of Integer)
		Get
			Return Me._SoLuongKhachMoiPhong
		End Get
		Set
			If (Me._SoLuongKhachMoiPhong.Equals(value) = false) Then
				Me._SoLuongKhachMoiPhong = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SoLuongKhachNuocNgoai", DbType:="Int")>  _
	Public Property SoLuongKhachNuocNgoai() As System.Nullable(Of Integer)
		Get
			Return Me._SoLuongKhachNuocNgoai
		End Get
		Set
			If (Me._SoLuongKhachNuocNgoai.Equals(value) = false) Then
				Me._SoLuongKhachNuocNgoai = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HeSo", DbType:="Float NOT NULL")>  _
	Public Property HeSo() As Double
		Get
			Return Me._HeSo
		End Get
		Set
			If ((Me._HeSo = value)  _
						= false) Then
				Me._HeSo = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TyLePhuThu", DbType:="Float NOT NULL")>  _
	Public Property TyLePhuThu() As Double
		Get
			Return Me._TyLePhuThu
		End Get
		Set
			If ((Me._TyLePhuThu = value)  _
						= false) Then
				Me._TyLePhuThu = value
			End If
		End Set
	End Property
End Class
